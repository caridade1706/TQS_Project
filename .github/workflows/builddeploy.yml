name: Build and Deploy Application

on:
  push:
    branches:
      - main
      - deploy

  pull_request:
    branches:
      - main
      - deploy
    types: [opened, synchronize, reopened]

  workflow_dispatch:

jobs:
  acceptance_tests:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql/mysql-server:8.0.26
        env:
          MYSQL_DATABASE: sql_hospital
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_USER: user
          MYSQL_PASSWORD: 3536
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=10s
          --health-retries=5

    steps:
    - uses: actions/checkout@v3
      name: Check out repository code

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2
    
    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=caridade1706_TQS_Project
      working-directory: ./cliniconnect

  build:
    needs: acceptance_tests
    name: Build
    runs-on: ubuntu-latest
    env:
      PRODUCTION: true
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/bake-action@v3
        with:
          push: true
          files: docker-compose.prod.yml
          workdir: .
          set: |
            *.cache-to=type=gha,scope=cached-stage,mode=max
            *.cache-from=type=gha,scope=cached-stage

  deploy:
    name: Deploy to VM UA
    runs-on: self-hosted
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Login to GitHub Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy with docker-compose
        working-directory: .
        run: |
          docker compose -f docker-compose.prod.yml pull
          docker compose -f docker-compose.prod.yml up -d --remove-orphans
          docker container prune -f
          docker image prune -af
          docker builder prune
          
    # Uncomment if you want to use the SSH steps instead
    # steps:
    # - name: Checkout code
    #   uses: actions/checkout@v3

    # - name: Set up SSH
    #   uses: webfactory/ssh-agent@v0.5.3
    #   with:
    #     ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    # - name: Copy files via SCP
    #   run: |
    #     scp -o StrictHostKeyChecking=no -r ./* robertorcastro@deti-tqs-09.ua.pt:~/TQS_Project_Group9/

    # - name: Deploy with SSH
    #   run: |
    #     ssh -o StrictHostKeyChecking=no robertorcastro@deti-tqs-09.ua.pt << 'EOF'
    #     cd ~/TQS_Project_Group9
    #     docker-compose down
    #     docker-compose up -d --build
    #     EOF
